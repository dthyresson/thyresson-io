---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../../consts';
import { db, Tracks, asc, eq } from 'astro:db';

function formatDuration(seconds: number) {
  const mins = Math.floor(seconds / 60_000);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

const { artist } = Astro.params;

if (!artist) {
  return Astro.redirect('/music');
}

// Define the track type
type Track = {
  name: string | null;
  artist: string | null;
  album: string | null;
  genre: string | null;
  duration: number | null;
  year: number | null;
};

// Cache key for this query
const CACHE_KEY = `artist-tracks-${artist}`;

// Get tracks with caching
let tracks: Track[] = [];
try {
  const cached = await caches.open('artist-tracks');
  const response = await cached.match(CACHE_KEY);

  if (response) {
    tracks = await response.json();
  } else {
    tracks = await db
      .select()
      .from(Tracks)
      .where(eq(Tracks.artist, artist))
      .orderBy(asc(Tracks.year), asc(Tracks.album), asc(Tracks.name));

    await cached.put(
      CACHE_KEY,
      new Response(JSON.stringify(tracks), {
        headers: { 'Cache-Control': 'max-age=3600' },
      })
    );
  }
} catch (error) {
  // Fallback to direct DB query if caching fails
  tracks = await db
    .select()
    .from(Tracks)
    .where(eq(Tracks.artist, artist))
    .orderBy(asc(Tracks.year), asc(Tracks.album), asc(Tracks.name));
}

export const prerender = false;

// Allow browser to cache for 5 minutes, then revalidate
Astro.response.headers.set(
  'cache-control',
  'public, max-age=300, must-revalidate'
);

// The CDN should cache for a week, but revalidate if the cache tag changes
Astro.response.headers.set('netlify-cdn-cache-control', 's-maxage=604800');

// Tag the page with the content type
// cache tag is used to invalidate the cache when the page is updated
const cacheTag = `pwv-music-collection-${artist}`;
Astro.response.headers.set('netlify-cache-tag', cacheTag);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`${artist} | Music Collection | ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
  </head>
  <body>
    <main class="md:max-w-2xl lg:max-w-3xl mx-auto px-4 md:px-6">
      <Header />
      <article>
        <div class="prose text-lg text-black">
          <h1 class="text-3xl font-bold mb-6">
            üé§ {decodeURIComponent(artist)}
          </h1>

          <div class="space-y-4">
            {
              tracks.map((track) => (
                <div class="bg-white rounded-lg shadow-md p-4">
                  <h2 class="font-semibold text-xl">üéµ {track.name}</h2>
                  <p class="text-gray-600">üíø {track.album}</p>
                  <p class="text-gray-600">
                    üïí {formatDuration(track.duration ?? 0)}
                  </p>
                  <p class="text-gray-600">üé∂ {track.genre}</p>
                  <p class="text-gray-600">üóìÔ∏è {track.year}</p>
                </div>
              ))
            }
          </div>

          <div class="mt-8">
            <a
              href="/music"
              class="text-blue-600 hover:text-blue-800 font-medium"
            >
              ‚Üê Back to Music Collection
            </a>
          </div>
        </div>
      </article>
      <Footer />
    </main>
  </body>
</html>
