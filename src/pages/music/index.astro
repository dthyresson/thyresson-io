---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import ArtistSearch from '../../components/ArtistSearch';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

import { db, Tracks, asc, and, gte, lte } from 'astro:db';

const yearRange = {
  start: 1984,
  end: 1999,
};

// Define the artist type
type Artist = {
  artist: string | null;
};

// Cache key for this query
const CACHE_KEY = `artists-${yearRange.start}-${yearRange.end}`;

// Get artists with caching
let artists: Artist[] = [];
try {
  const cached = await caches.open('artists-list');
  const response = await cached.match(CACHE_KEY);

  if (response) {
    artists = await response.json();
  } else {
    artists = await db
      .selectDistinct({
        artist: Tracks.artist,
      })
      .from(Tracks)
      .where(
        and(gte(Tracks.year, yearRange.start), lte(Tracks.year, yearRange.end))
      )
      .groupBy(Tracks.artist)
      .orderBy(asc(Tracks.artist));

    await cached.put(
      CACHE_KEY,
      new Response(JSON.stringify(artists), {
        headers: { 'Cache-Control': 'max-age=3600' },
      })
    );
  }
} catch (error) {
  // Fallback to direct DB query if caching fails
  artists = await db
    .selectDistinct({
      artist: Tracks.artist,
    })
    .from(Tracks)
    .where(
      and(gte(Tracks.year, yearRange.start), lte(Tracks.year, yearRange.end))
    )
    .groupBy(Tracks.artist)
    .orderBy(asc(Tracks.artist));
}

// Group artists by first letter
const groupedArtists = artists.reduce(
  (acc, artist) => {
    if (!artist.artist) return acc;

    let firstChar = artist.artist.charAt(0).toUpperCase();
    // Check if it's a number
    if (/[0-9]/.test(firstChar)) {
      firstChar = '#';
    }
    // Check if it's not a letter or number
    else if (!/[A-Z]/.test(firstChar)) {
      firstChar = '?';
    }

    acc[firstChar] = acc[firstChar] || [];
    acc[firstChar].push(artist);
    return acc;
  },
  {} as Record<string, typeof artists>
);

// Sort the keys alphabetically, but ensure '#' and '?' are at the end
const sortedGroups = Object.keys(groupedArtists).sort((a, b) => {
  if (a === '#') return 1;
  if (b === '#') return -1;
  if (a === '?') return 1;
  if (b === '?') return -1;
  return a.localeCompare(b);
});

// Transform the data for the search component
const artistsForSearch = sortedGroups.map((letter) => ({
  letter,
  names: groupedArtists[letter]
    .map((a) => a.artist)
    .filter(Boolean) as string[],
}));

export const prerender = false;

// Allow browser to cache for 5 minutes, then revalidate
Astro.response.headers.set(
  'cache-control',
  'public, max-age=300, must-revalidate'
);

// The CDN should cache for a week, but revalidate if the cache tag changes
Astro.response.headers.set('netlify-cdn-cache-control', 's-maxage=604800');

// Tag the page with the content type
const cacheTag = `pwv-music-collection-${yearRange.start}-${yearRange.end}`;
Astro.response.headers.set('netlify-cache-tag', cacheTag);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={`Music Collection | ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
  </head>
  <body>
    <main class="md:max-w-2xl lg:max-w-3xl mx-auto px-4 md:px-6">
      <Header />
      <article>
        <div class="prose text-lg text-black">
          <h1 class="text-3xl font-bold mb-6">Music Collection</h1>
          <p>
            This experiment exported an old iTunes Library to XML and loaded
            into a Turso database. You can pick an artist to see some of their
            tracks.
          </p>
          <p>
            Sinc there are 25k+ tracks, am filtering from mid 80s through the
            90s.
          </p>
          <p>It's incomplete and a bit messy, but it's a start.</p>

          <ArtistSearch artists={artistsForSearch} client:load />
        </div>
      </article>
      <Footer />
    </main>
  </body>
</html>
